jacoco {
    toolVersion = "0.8.7"
}
ext {
    controllerSources = ['com/baichuan/example/unit_test/controller/**']
    serviceSources = ['com/baichuan/example/unit_test/service/**']
    all = ['com/baichuan/example/unit_test/**']
    reportDir = 'jacocoHtmlReports'

    verifyAll = ['com.baichuan.example.unit_test.service.*', 'com.baichuan.example.unit_test.controller.*']
    verifyService = ['com.baichuan.example.unit_test.service.*']
}

test { t ->
    basicTestConfig(t as Test, project.ext.all as String[], name)
}

task serviceTest(type: Test) { t ->
    includes = project.ext.serviceSources

    basicTestConfig(t as Test, project.ext.serviceSources as String[], name)
}

task controllerTest(type: Test) { t ->
    includes = project.ext.controllerSources
    basicTestConfig(t as Test, project.ext.controllerSources as String[], name)
}


//jacoco 覆盖率验证
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.1
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

// test task基本设置
void basicTestConfig(Test test, String[] includeSources = project.ext.serviceSources, taskName) {
    test.useTestNG()
    test.useJUnitPlatform()

    if (taskName == 'test') {
        test.finalizedBy jacocoTestReport
    }
    test.testLogging {
        events("passed", "skipped", "failed")
    }
    test.reports {
        junitXml.required = false
        html.required = true
    }
    test.jacoco {
        enabled = true
        //指定原始数据文件位置
        destinationFile = layout.buildDirectory.file("jacoco/${taskName}.exec").get().asFile
        includes = includeSources
        //includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

//test task jacoco reporter
jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn test

    /**<p>
     * 这个task默认设置的executionData为build/jacoco/test.exec（如果test task的jacoco extension里指定了destinationFile，
     * 则会取配置的这个destinationFile），sourceSets为sourceSets.main。总的来说，这个task是跟test task强绑定的
     *
     * ps: jacoco extension就是test里的jacoco节点
     * </p>
     * <p>
     * 所以，如果要使用jacocoTestReport来作为非预定义的test task的报告生成器，则需要在这个test的扩展里
     * 指定destinationFile为build/jacoco/test.exec(如果test task的jacoco extension里指定了destinationFile，则必须为这个值)，
     * 或者在这个task里移除默认设置的executionData，
     * 然后重新指定executionData。
     *
     * 如何移除默认的executionData(这个是调试源码后得出来的能按预期执行的代码)：((DefaultConfigurableFileCollection) executionData).filesWrapper.clear();
     * </p>
     *
     * <p>
     * 所以，如果我们使用jacocoTestReport来为我们自定义的test的生成报告，如果我们没有在jacocoTestReport里指定onlyIf = {true}，
     * 则jacocoTestReport必然不会执行，控制台会打印出jacocoTestReport SKIPPED。这是因为test.exec不存在，从而默认的onlyIf会返回false。
     * 而如果我们设置了onlyIf = {true}，虽然会执行，但是执行时必然会报找不到executionData对应的文件的错误
     * </p>
     *
     * 参考：
     * {@link org.gradle.testing.jacoco.plugins.JacocoPlugin#addDefaultReportAndCoverageVerificationTasks}
     * {@link org.gradle.testing.jacoco.plugins.JacocoPlugin#addDefaultReportTask}
     * {@link org.gradle.testing.jacoco.tasks.JacocoReportBase#executionData}
     *
     * Note: final JacocoTaskExtension extension = task.getExtensions().findByType(JacocoTaskExtension.class);
     * 这个是jacocoTestReport(默认的JacocoReport)才有的做法。它会取到test里jacoco extension，然后用这个extension里配置的destinationFile来设置executionData
     * 这是因为jacocoTestReport被注册为task{@link org.gradle.testing.jacoco.plugins.JacocoPlugin#addDefaultReportTask}
     * 的同时定义了这个操作的调用{@link org.gradle.testing.jacoco.tasks.JacocoReportBase#executionData}
     *
     * 普通的JacocoReport会执行内部Closure来进行属性设置
     *
     */

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, include: project.ext.all)
        }))
    }
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir(project.ext.reportDir as String)
    }

    /**
     * 这里的值决定了这个task是否执行。true:执行.false:不执行.
     * 在jacocoPlugin里，这个函数的返回值默认取决于executionData里配置的文件是否存在。文件不存在，则返回false
     * {@link org.gradle.testing.jacoco.tasks.JacocoReportBase#JacocoReportBase}
     * {@link org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter#execute}
     */
    onlyIf = { true }
}

//service test task jacoco reporter
task serviceTestJacocoReport(type: JacocoReport) {
    // tests are required to run before generating the report
    dependsOn serviceTest

    //自定义的不会初始化默认的源码目录，需要手动指定
    sourceSets sourceSets.main

    executionData(layout.buildDirectory.file("jacoco/${serviceTest.name}.exec").get().asFile)

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, include: project.ext.serviceSources)
        }))
    }
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir(project.ext.reportDir as String)
    }

    onlyIf = { true }
}

//controller task jacoco reporter
task controllerTestJacocoReport(type: JacocoReport) {
    // tests are required to run before generating the report
    dependsOn controllerTest

    sourceSets sourceSets.main

    executionData(layout.buildDirectory.file("jacoco/${controllerTest.name}.exec").get().asFile)

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, include: project.ext.controllerSources)
        }))
    }
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir(project.ext.reportDir as String)
    }
    onlyIf = { true }
}

void basicTestCoverageVerificationConfig(JacocoCoverageVerification task
                                         , String[] includeSources = rootProject.ext.verifyService
                                         , String[] excludeSources = ['*Kt']
                                         , BigDecimal instructionMinimum = 0.3) {
    task.violationRules {
        //以类为单位验证指令覆盖率
        rule {
            element = 'CLASS'
            includes = includeSources
            excludes = excludeSources
            limit {
                minimum = instructionMinimum
            }
        }

        //验证行覆盖率
        rule {
            element = 'CLASS'
            includes = includeSources
            excludes = excludeSources
            limit {
                counter = 'LINE'
                minimum = 0.3
            }
        }

        //验证代码条件分支覆盖率
        rule {
            enabled = true
            element = 'CLASS'
            includes = includeSources
            excludes = excludeSources

            limit {
                counter = 'BRANCH'
                minimum = 0
            }
        }

        //复杂度覆盖率。代码不同执行路径组合的覆盖率
        rule {
            enabled = true
            element = 'CLASS'
            includes = includeSources
            excludes = excludeSources

            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                minimum = 0
            }
        }
    }
    task.onlyIf = { true }
}