jacoco {
    toolVersion = "0.8.7"
}
ext {
    controllerSources = ['com/baichuan/example/unit_test/controller/**']
    serviceSources = ['com/baichuan/example/unit_test/service/**']
    all = ['com/baichuan/example/unit_test/**']
    reportDir = 'jacocoHtmlReports'
}

test { t ->
    basicTestConfig(t as Test, project.ext.all as String[], name)
}


//jacoco 覆盖率验证
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'METHOD'
            includes = ['com.baichuan.example.unit_test.*']
            limit {
                minimum = 0.9
            }
        }

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['com.baichuan.example.unit_test.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

// test task基本设置
void basicTestConfig(Test test, String[] includeSources = project.ext.serviceSources, taskName) {
    test.useTestNG()
    test.useJUnitPlatform()

    if (taskName == 'test') {
        test.finalizedBy jacocoTestReport
    }
    test.testLogging {
        events("passed", "skipped", "failed")
    }
    test.reports {
        junitXml.required = false
        html.required = true
    }
    test.jacoco {
        enabled = true
        //指定原始数据文件位置
        destinationFile = layout.buildDirectory.file("jacoco/${taskName}.exec").get().asFile
        includes = includeSources
        //includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

//test task jacoco reporter
jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, include: project.ext.all)
        }))
    }
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir(project.ext.reportDir as String)
    }

    onlyIf = { true }
}